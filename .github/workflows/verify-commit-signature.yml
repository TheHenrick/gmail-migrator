name: Verify Commit Signatures

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  verify-commit-signatures:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache the jq tool
      - name: Cache jq
        id: cache-jq
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/jq
          key: ${{ runner.os }}-jq-1.6

      # Install jq if not cached
      - name: Install jq
        if: steps.cache-jq.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check for unsigned commits
        run: |
          # Define the cutoff commit after which signatures are required
          SIGNATURE_REQUIREMENT_COMMIT="dea847bd8f790ab69280e3e95e1f3c48fb0b2158"

          # Get all commits in the PR (for pull_request) or the push (for push)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Checking commits in PR #${{ github.event.pull_request.number }}"
            COMMITS=$(git log --format="%H" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            echo "Checking commits in push"
            COMMITS=$(git log --format="%H" ${{ github.event.before }}..${{ github.event.after }})
          fi

          # Skip check if working with historical commits
          if git merge-base --is-ancestor $SIGNATURE_REQUIREMENT_COMMIT ${{ github.event.after || github.event.pull_request.head.sha }}; then
            echo "Checking commits made after the signature policy was introduced"
          else
            echo "All commits are from before the signature policy was introduced - skipping verification"
            exit 0
          fi

          # We'll use GitHub's API to check commit signature verification status
          # This uses the same verification logic that GitHub web interface uses
          UNVERIFIED_COMMITS=0

          for COMMIT in $COMMITS; do
            # Skip commits that are the requirement commit or older
            if git merge-base --is-ancestor $COMMIT $SIGNATURE_REQUIREMENT_COMMIT; then
              echo "⏭️ Skipping historical commit: $COMMIT (made before signature requirement)"
              continue
            fi

            # Query GitHub API for this commit's verification status
            VERIFICATION_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT" | \
              jq -r '.commit.verification.verified')

            # Check verification status from GitHub API
            if [ "$VERIFICATION_STATUS" = "true" ]; then
              echo "✅ GitHub verified commit: $COMMIT"
              git log -1 --pretty=format:"%h %an <%ae> %s" $COMMIT
            else
              echo "❌ GitHub shows unverified commit: $COMMIT"
              git log -1 --pretty=format:"%h %an <%ae> %s" $COMMIT
              UNVERIFIED_COMMITS=$((UNVERIFIED_COMMITS + 1))
            fi
          done

          # Fail if there are unverified commits according to GitHub
          if [ $UNVERIFIED_COMMITS -gt 0 ]; then
            echo "::error::Found $UNVERIFIED_COMMITS commits not verified by GitHub. All commits must be verified."
            exit 1
          fi

          echo "All commits are properly verified by GitHub! ✅"
